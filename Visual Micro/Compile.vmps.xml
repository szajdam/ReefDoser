<VisualMicro>
  <Program Name="ReefDoser" Ext=".ino" Location="D:\Projekty\ReefDoser">
    <Platform Package="arduino" Platform="avr" Architecture="avr" Name="arduino15x">
      <Board Name="mega_atmega2560" Description="Arduino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\cores\arduino" VariantFullPath="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\variants\mega" McuIdePath="D:\Arduino\arduino-1.5.6-r2" McuSketchBookPath="D:\OneDrive\Projekty" name="Arduino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="258048" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="D:\Arduino\arduino-1.5.6-r2" build.system.path="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\system" runtime.ide.version="156" originalid="mega" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.5.6" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os -w -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" tools.avrdude.cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" tools.avrdude.config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" tools.avrdude.cmd.path.linux="{runtime.ide.path}/hardware/tools/avrdude" tools.avrdude.config.path.linux="{runtime.ide.path}/hardware/tools/avrdude.conf" tools.avrdude.upload.params.verbose="-v -v -v -v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v -v -v -v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v -v -v -v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v -v -v -v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.usb_manufacturer="" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\arduino15x" upload.protocol="wiring" upload.maximum_size="258048" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" build.core.vmresolved="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr" vm.core.include="arduino.h" ide.hint="Arduino 1.5 Ide" ide.location.key="Arduino15x" ide.location.ide.winreg="Arduino 1.5.x Application" ide.location.sketchbook.winreg="Arduino 1.5.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.location.preferences="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino\preferences.txt" ide.default.version="150" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="150" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.appid="arduino15x" location.sketchbook="D:\OneDrive\Projekty" vm.boardsource.path="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" build.variant.vmresolved="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\variants\mega" vm.runtime.compiler.showwarnings="false" compiler.path="D:\Arduino\arduino-1.5.6-r2\hardware\tools\avr\bin\" includes=" -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\cores\arduino&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\variants\mega&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers\VM_DBG&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\OneWire&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\libraries\EEPROM&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\libraries\Wire&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\Time&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\DS1307RTC&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\UTFT&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\UTouch&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries\dallas-temperature-control&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\libraries&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\libraries&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers&quot;  -I&quot;D:\OneDrive\Projekty\libraries&quot;  -I&quot;D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\libraries\Wire\utility&quot;" build.path="C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560" build.project_name="ReefDoser" build.variant.path="D:\Arduino\arduino-1.5.6-r2\hardware\arduino\avr\variants\mega" archive_file="core.a" object_file="C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\dallas-temperature-control\DallasTemperature.cpp.o" source_file="D:\Arduino\arduino-1.5.6-r2\libraries\dallas-temperature-control\DallasTemperature.cpp" object_files="&quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\Pump.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\ReefDoser.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\ThermoMeter.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\VM_DBG\VM_mem_check.c.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\VM_DBG\VM_DBG.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\OneWire\OneWire.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\EEPROM\EEPROM.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\Wire\Wire.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\Wire\utility\twi.c.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\Time\DateStrings.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\Time\Time.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\DS1307RTC\DS1307RTC.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\UTFT\DefaultFonts.c.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\UTFT\UTFT.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\UTouch\UTouch.cpp.o&quot; &quot;C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560\dallas-temperature-control\DallasTemperature.cpp.o&quot; " build.architecture="avr" vmresolved.compiler.path="D:\Arduino\arduino-1.5.6-r2\hardware\tools\avr\bin\" vmresolved.tools.path="D:\Arduino\arduino-1.5.6-r2\hardware\tools\avr" upload.verbose="-q -q" path="D:\Arduino\arduino-1.5.6-r2\hardware\tools" cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" serial.port.file="COM5" serial.port="COM5" />
    </Platform>
    <Compile CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Zosia\AppData\Local\VMicro\Arduino\Builds\ReefDoser\mega_atmega2560" IsDebugStart="1" SketchName="ReefDoser" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Debug EnableBreak="1" DebugEnabled="1" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Pump.cpp, line 87 character 1" Id="21b66cf3-71b3-4252-bbbd-af929bbda205" Enabled="1" Message="{LastDosingTime.Day}, {NextDosingTime.Day}" MessageTextType="0" PreProcessedMessage="{0}, {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="87" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='21b66cf3-71b3-4252-bbbd-af929bbda205'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>80		RemainingDailyDose = EEPROMReadInt(EepromAddrRemainDose);
81		//RemainingDailyDosesNo = EEPROMReadInt(EepromAddrNoOfRemainDoses);
82		PumpDelay = EepromAddrPumpDelay &gt; 0?EEPROMReadInt(EepromAddrPumpDelay):0;
83			
84		LastDosingTime.Day = EEPROMReadInt(EepromAddrLastDoseDay);
85		LastDosingTime.Hour = EEPROMReadInt(EepromAddrHH);
86		LastDosingTime.Minute = EEPROMReadInt(EepromAddrMM);
--&gt;87		
88		//next dosing - last dosing a day ago (doser switched off for a day)
89		if(LastDosingTime.Day&lt;(*CurrentTime).Day) {
90			NextDosingTime = LastDosingTime;
91			advanceDay();
92		}
93		//last dosing at the same day - remainder to be dosed
94		else if(LastDosingTime.Day == (*CurrentTime).Day) {
95			unsigned long delayHH = ((DAILY_DOSES_DELAY) / (TIME_AN_HOUR));
96			unsigned long delayMM = round((DAILY_DOSES_DELAY) % (TIME_AN_HOUR));
</Source>
        <MessageVariables>
          <MessageVariable Name="LastDosingTime.Day" Index="1" />
          <MessageVariable Name="NextDosingTime.Day" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Pump.cpp, line 97 character 1" Id="8eee7bf7-48af-4094-9791-41a4872634b6" Enabled="1" Message="{delayHH}, {delayMM}" MessageTextType="0" PreProcessedMessage="{0}, {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="97" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='8eee7bf7-48af-4094-9791-41a4872634b6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>90			NextDosingTime = LastDosingTime;
91			advanceDay();
92		}
93		//last dosing at the same day - remainder to be dosed
94		else if(LastDosingTime.Day == (*CurrentTime).Day) {
95			unsigned long delayHH = ((DAILY_DOSES_DELAY) / (TIME_AN_HOUR));
96			unsigned long delayMM = round((DAILY_DOSES_DELAY) % (TIME_AN_HOUR));
--&gt;97			NextDosingTime.Day = LastDosingTime.Day;
98			NextDosingTime.Hour = LastDosingTime.Hour + delayHH;
99			NextDosingTime.Minute = LastDosingTime.Minute + delayMM;
100		}
101		
102		
103		changeState(STATE_INITIALIZED);
104	}
105	void Pump::init(Pump &amp;dependentPump){
106		DependentToPump = &amp;dependentPump;
</Source>
        <MessageVariables>
          <MessageVariable Name="delayHH" Index="1" />
          <MessageVariable Name="delayMM" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="Pump.cpp, line 99 character 1" Id="0599cd29-ac91-457a-a113-d2990e8b1cc7" Enabled="1" Message="{NextDosingTime.Day}, {NextDosingTime.Hour}, {NextDosingTime.Minute}" MessageTextType="0" PreProcessedMessage="{0}, {1}, {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="99" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='0599cd29-ac91-457a-a113-d2990e8b1cc7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>92		}
93		//last dosing at the same day - remainder to be dosed
94		else if(LastDosingTime.Day == (*CurrentTime).Day) {
95			unsigned long delayHH = ((DAILY_DOSES_DELAY) / (TIME_AN_HOUR));
96			unsigned long delayMM = round((DAILY_DOSES_DELAY) % (TIME_AN_HOUR));
97			NextDosingTime.Day = LastDosingTime.Day;
98			NextDosingTime.Hour = LastDosingTime.Hour + delayHH;
--&gt;99			NextDosingTime.Minute = LastDosingTime.Minute + delayMM;
100		}
101		
102		
103		changeState(STATE_INITIALIZED);
104	}
105	void Pump::init(Pump &amp;dependentPump){
106		DependentToPump = &amp;dependentPump;
107		init();
108	}
</Source>
        <MessageVariables>
          <MessageVariable Name="NextDosingTime.Day" Index="1" />
          <MessageVariable Name="NextDosingTime.Hour" Index="2" />
          <MessageVariable Name="NextDosingTime.Minute" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Pump.cpp, line 260 character 1" Id="dc8acd1b-5154-4ef8-8cfd-b31e2da58a2c" Enabled="1" Message="{NextDosingTime.Day}, {NextDosingTime.Hour}, {NextDosingTime.Minute}" MessageTextType="0" PreProcessedMessage="{0}, {1}, {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="260" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='dc8acd1b-5154-4ef8-8cfd-b31e2da58a2c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>253		if(NextDosingTime.Day &lt; (*CurrentTime).Day &amp;&amp; LastDosingTime.Day &lt; (*CurrentTime).Day &amp;&amp; (*CurrentTime).Hour &gt;= DAILY_DOSES_RESET_HOUR) {
254			RemainingDailyDose = (RemainingDailyDose + DailyDose);
255			EEPROMWriteInt(EepromAddrRemainDose, RemainingDailyDose);
256			
257			NextDosingTime.Day = (*CurrentTime).Day; //current day
258			
259			NextDosingTime.Hour = ((*CurrentTime).Hour &gt;= DAILY_DOSES_START_HOUR ? (*CurrentTime).Hour : DAILY_DOSES_START_HOUR);
--&gt;260			NextDosingTime.Minute = ((*CurrentTime).Hour &gt;= DAILY_DOSES_START_HOUR ? (*CurrentTime).Minute + 1 : 0) ;
261		}
262	}
263	int Pump::getRemainingDose() {
264		return RemainingDailyDose;
265	}
266	doseTime_t Pump::getNextDosingTime() {
267		return NextDosingTime;
268	}
269	String Pump::getNextDosingTimeStr() {
</Source>
        <MessageVariables>
          <MessageVariable Name="NextDosingTime.Day" Index="1" />
          <MessageVariable Name="NextDosingTime.Hour" Index="2" />
          <MessageVariable Name="NextDosingTime.Minute" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Pump.cpp, line 213 character 1" Id="b34e4f16-154f-4c70-8481-2086bf0847e1" Enabled="1" Message="{RemainingDailyDose}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="213" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='b34e4f16-154f-4c70-8481-2086bf0847e1'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>206	}
207	void Pump::doseEnd(unsigned long dosedMillis) {
208		stopPump();
209		changeState(STATE_IDLE);
210		LastVolumePumped = (dosedMillis/PumpPerf);
211		//set remaining Dose
212		RemainingDailyDose = RemainingDailyDose - LastVolumePumped;
--&gt;213		EEPROMWriteInt(EepromAddrRemainDose, RemainingDailyDose);
214		
215		LastDosingTime.Day = (*CurrentTime).Day;
216		LastDosingTime.Hour = (*CurrentTime).Hour;
217		LastDosingTime.Minute = (*CurrentTime).Minute;
218		//set last dose day
219		if(EEPROMReadInt(EepromAddrLastDoseDay) != LastDosingTime.Day) {
220			EEPROMWriteInt(EepromAddrLastDoseDay, LastDosingTime.Day);
221		}
222		//set last dose time
</Source>
        <MessageVariables>
          <MessageVariable Name="RemainingDailyDose" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="Pump.cpp, line 192 character 1" Id="1313eacb-9d75-4a50-9d75-286f9bea734b" Enabled="1" Message="{millisToDose}, {DailyDose * PumpPerf}" MessageTextType="0" PreProcessedMessage="{0}, {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="192" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='1313eacb-9d75-4a50-9d75-286f9bea734b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>185			}
186		}
187		return false;
188	}
189	unsigned long Pump::checkDosingEnd() {
190		if(PumpState == STATE_DOSING) {
191			unsigned long currentMillis = millis();
--&gt;192			unsigned long millisToDose = ((DailyDose * PumpPerf) / DAILY_DOSES);
193			if(((currentMillis - PumpStateMillis) &gt;= millisToDose) 
194				|| (millisToDose &lt; (RemainingDailyDose * PumpPerf)  &amp;&amp; currentMillis - PumpStateMillis &gt;= (RemainingDailyDose * PumpPerf))){
195				return (currentMillis - PumpStateMillis);
196			}
197			else {
198				return 0;
199			}
200		}
201		return 0;
</Source>
        <MessageVariables>
          <MessageVariable Name="millisToDose" Index="1" />
          <MessageVariable Name="DailyDose * PumpPerf" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="Pump.cpp, line 195 character 1" Id="8c7450a0-62c0-41e2-b2f4-ced9f846ade2" Enabled="1" Message="{currentMillis - PumpStateMillis}" MessageTextType="0" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="195" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='8c7450a0-62c0-41e2-b2f4-ced9f846ade2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>188	}
189	unsigned long Pump::checkDosingEnd() {
190		if(PumpState == STATE_DOSING) {
191			unsigned long currentMillis = millis();
192			unsigned long millisToDose = ((DailyDose * PumpPerf) / DAILY_DOSES);
193			if(((currentMillis - PumpStateMillis) &gt;= millisToDose) 
194				|| (millisToDose &lt; (RemainingDailyDose * PumpPerf)  &amp;&amp; currentMillis - PumpStateMillis &gt;= (RemainingDailyDose * PumpPerf))){
--&gt;195				return (currentMillis - PumpStateMillis);
196			}
197			else {
198				return 0;
199			}
200		}
201		return 0;
202	}
203	void Pump::doseStart() {
204		changeState(STATE_DOSING);
</Source>
        <MessageVariables>
          <MessageVariable Name="currentMillis - PumpStateMillis" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="Pump.cpp, line 198 character 1" Id="f736fe12-db1e-4f7b-9bfa-18b21b2ce83a" Enabled="1" Message="{currentMillis - PumpStateMillis}" MessageTextType="0" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="198" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='f736fe12-db1e-4f7b-9bfa-18b21b2ce83a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>191			unsigned long currentMillis = millis();
192			unsigned long millisToDose = ((DailyDose * PumpPerf) / DAILY_DOSES);
193			if(((currentMillis - PumpStateMillis) &gt;= millisToDose) 
194				|| (millisToDose &lt; (RemainingDailyDose * PumpPerf)  &amp;&amp; currentMillis - PumpStateMillis &gt;= (RemainingDailyDose * PumpPerf))){
195				return (currentMillis - PumpStateMillis);
196			}
197			else {
--&gt;198				return 0;
199			}
200		}
201		return 0;
202	}
203	void Pump::doseStart() {
204		changeState(STATE_DOSING);
205		startPump();
206	}
207	void Pump::doseEnd(unsigned long dosedMillis) {
</Source>
        <MessageVariables>
          <MessageVariable Name="currentMillis - PumpStateMillis" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="Pump.cpp, line 235 character 1" Id="7589d49e-8735-4f1a-926a-e211d38abb4a" Enabled="1" Message="{delayHH}, {delayMM}, {LastDosingTime.Hour}" MessageTextType="0" PreProcessedMessage="{0}, {1}, {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\projekty\reefdoser\pump.cpp" FileLine="235" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="AVR GCC" LocationType="3" Tag="&lt;vmbp Id='50f1c3b9-9c14-4a1c-b859-2cda48bc4ccc'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>228		}
229		
230		if(RemainingDailyDose &gt; 0) {
231			NextDosingTime.Day = LastDosingTime.Day; //current day
232			int delayHH = ((DAILY_DOSES_DELAY) / (TIME_AN_HOUR));
233			int delayMM = ((DAILY_DOSES_DELAY) % (TIME_AN_HOUR));
234			
--&gt;235			NextDosingTime.Hour = LastDosingTime.Hour + delayHH;
236			NextDosingTime.Minute = LastDosingTime.Minute + delayMM + (LastDosingTime.Minute - DependentToPump-&gt;LastDosingTime.Minute) &lt; PumpDelay? PumpDelay - (LastDosingTime.Minute - DependentToPump-&gt;LastDosingTime.Minute):PumpDelay;
237			
238		}
239		
240	}
241	void Pump::startPump() {
242		//digitalWrite(LED_NOTIF, HIGH);
243		digitalWrite(PumpEn, HIGH);
244		digitalWrite(PumpIn1, HIGH);
</Source>
        <MessageVariables>
          <MessageVariable Name="delayHH" Index="1" />
          <MessageVariable Name="delayMM" Index="2" />
          <MessageVariable Name="LastDosingTime.Hour" Index="3" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>